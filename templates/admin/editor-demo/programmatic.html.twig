{% extends 'admin/base.html.twig' %}

{% block title %}Éditeur Personnalisé - Intégration JavaScript{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">
                    <i class="bi bi-code me-2"></i>Intégration JavaScript
                </h1>
                <a href="{{ path('admin_editor_demo_index') }}" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-1"></i>Retour aux exemples
                </a>
            </div>

            <div class="alert alert-warning">
                <i class="bi bi-lightbulb me-2"></i>
                <strong>Contrôle programmatique :</strong>
                Cet exemple montre comment contrôler l'éditeur via JavaScript pour des intégrations avancées.
            </div>

            <div class="row">
                <!-- Zone d'éditeur -->
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Éditeur programmatique</h5>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="createEditor()">
                                    <i class="bi bi-plus-circle me-1"></i>Créer
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="destroyEditor()">
                                    <i class="bi bi-trash me-1"></i>Détruire
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <textarea id="programmatic-editor" class="form-control" rows="10" 
                                    placeholder="Cet éditeur sera créé et contrôlé programmatiquement..."></textarea>
                        </div>
                    </div>

                    <!-- Zone de contenu en temps réel -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">Contenu HTML en temps réel</h6>
                        </div>
                        <div class="card-body">
                            <pre id="html-output" class="bg-light p-3 rounded small" style="max-height: 200px; overflow-y: auto;"><code>// Le HTML généré apparaitra ici</code></pre>
                        </div>
                    </div>
                </div>

                <!-- Contrôles -->
                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Contrôles programmatiques</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary btn-sm" onclick="insertSampleContent()">
                                    <i class="bi bi-file-text me-1"></i>Insérer contenu
                                </button>
                                <button class="btn btn-outline-success btn-sm" onclick="getEditorContent()">
                                    <i class="bi bi-eye me-1"></i>Afficher contenu
                                </button>
                                <button class="btn btn-outline-info btn-sm" onclick="toggleFullscreen()">
                                    <i class="bi bi-arrows-fullscreen me-1"></i>Mode plein écran
                                </button>
                                <button class="btn btn-outline-warning btn-sm" onclick="toggleSourceMode()">
                                    <i class="bi bi-code-slash me-1"></i>Mode source
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="showWordCount()">
                                    <i class="bi bi-123 me-1"></i>Compteur de mots
                                </button>
                                <button class="btn btn-outline-dark btn-sm" onclick="clearContent()">
                                    <i class="bi bi-eraser me-1"></i>Vider contenu
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">Configuration dynamique</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Hauteur (éditeur)</label>
                                <input type="range" class="form-range" min="200" max="600" value="300" 
                                       onchange="changeEditorHeight(this.value)">
                                <small class="text-muted">Hauteur: <span id="height-value">300</span>px</small>
                            </div>
                            
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="enableMedia" checked 
                                           onchange="toggleMediaEnabled()">
                                    <label class="form-check-label" for="enableMedia">
                                        Gestionnaire de médias
                                    </label>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="enableAutoSave" 
                                           onchange="toggleAutoSave()">
                                    <label class="form-check-label" for="enableAutoSave">
                                        Sauvegarde automatique
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">Statut de l'éditeur</h6>
                        </div>
                        <div class="card-body">
                            <div id="editor-status">
                                <div class="text-muted">Éditeur non initialisé</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Code d'exemple -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Code JavaScript utilisé</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Création programmatique</h6>
                                    <pre class="bg-light p-3 rounded small"><code>// Créer un éditeur
$('#mon-textarea').customEditor({
    height: 300,
    enableMedia: true,
    enableAutoSave: false,
    onChange: function(content) {
        console.log('Contenu modifié:', content);
    }
});

// Obtenir l'instance
const editor = $('#mon-textarea').data('customEditor');</code></pre>
                                </div>
                                <div class="col-md-6">
                                    <h6>Méthodes disponibles</h6>
                                    <pre class="bg-light p-3 rounded small"><code>// Méthodes de contrôle
editor.setContent(html);      // Définir le contenu
editor.getContent();          // Obtenir le contenu
editor.insertHTML(html);      // Insérer du HTML
editor.focus();               // Donner le focus
editor.toggleFullscreen();    // Plein écran
editor.toggleSourceMode();    // Mode source
editor.showWordCount();       // Compteur
editor.destroy();             // Détruire</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let editorInstance = null;
let editorConfig = {
    height: 300,
    enableMedia: true,
    enableAutoSave: false,
    enableFullscreen: true,
    enableWordCount: true,
    onChange: function(content) {
        updateHTMLOutput(content);
        updateEditorStatus();
    },
    onAutoSave: function(content) {
        console.log('Sauvegarde automatique:', content);
        showNotification('Contenu sauvegardé automatiquement', 'success');
    }
};

$(document).ready(function() {
    updateEditorStatus();
});

function createEditor() {
    if (editorInstance) {
        showNotification('Éditeur déjà créé', 'warning');
        return;
    }
    
    $('#programmatic-editor').customEditor(editorConfig);
    editorInstance = $('#programmatic-editor').data('customEditor');
    
    if (editorInstance) {
        showNotification('Éditeur créé avec succès', 'success');
        updateEditorStatus();
    }
}

function destroyEditor() {
    if (!editorInstance) {
        showNotification('Aucun éditeur à détruire', 'warning');
        return;
    }
    
    editorInstance.destroy();
    editorInstance = null;
    
    $('#html-output code').text('// Éditeur détruit');
    showNotification('Éditeur détruit', 'info');
    updateEditorStatus();
}

function insertSampleContent() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    const sampleContent = `
        <h2>Contenu d'exemple</h2>
        <p>Ceci est un <strong>exemple de contenu</strong> inséré programmatiquement.</p>
        <ul>
            <li>Premier élément</li>
            <li>Deuxième élément avec <em>emphase</em></li>
            <li>Troisième élément</li>
        </ul>
        <blockquote>"Citation insérée via JavaScript"</blockquote>
        <p>Timestamp: ${new Date().toLocaleString()}</p>
    `;
    
    editorInstance.setContent(sampleContent);
    showNotification('Contenu d\'exemple inséré', 'success');
}

function getEditorContent() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    const content = editorInstance.getContent();
    const textContent = editorInstance.contentElement.text();
    
    alert(`Contenu HTML:\n${content.substring(0, 200)}...\n\nTexte brut (${textContent.length} caractères):\n${textContent.substring(0, 100)}...`);
}

function toggleFullscreen() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    editorInstance.toggleFullscreen();
}

function toggleSourceMode() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    editorInstance.toggleSourceMode();
}

function showWordCount() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    editorInstance.showWordCount();
}

function clearContent() {
    if (!editorInstance) {
        showNotification('Créez d\'abord un éditeur', 'warning');
        return;
    }
    
    editorInstance.setContent('');
    showNotification('Contenu effacé', 'info');
}

function changeEditorHeight(height) {
    $('#height-value').text(height);
    editorConfig.height = parseInt(height);
    
    if (editorInstance) {
        editorInstance.contentElement.css('min-height', height + 'px');
        showNotification(`Hauteur changée: ${height}px`, 'info');
    }
}

function toggleMediaEnabled() {
    const enabled = $('#enableMedia').prop('checked');
    editorConfig.enableMedia = enabled;
    showNotification(`Gestionnaire de médias ${enabled ? 'activé' : 'désactivé'}`, 'info');
}

function toggleAutoSave() {
    const enabled = $('#enableAutoSave').prop('checked');
    editorConfig.enableAutoSave = enabled;
    editorConfig.autoSaveInterval = 5000; // 5 secondes pour la démo
    
    if (editorInstance) {
        editorInstance.options.enableAutoSave = enabled;
        editorInstance.options.autoSaveInterval = 5000;
        
        if (enabled) {
            editorInstance.setupAutoSave();
        } else {
            editorInstance.clearAutoSave();
        }
    }
    
    showNotification(`Sauvegarde automatique ${enabled ? 'activée' : 'désactivée'}`, 'info');
}

function updateHTMLOutput(content) {
    const formatted = content
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\n/g, '<br>');
    
    $('#html-output code').html(formatted || '// Aucun contenu');
}

function updateEditorStatus() {
    const statusDiv = $('#editor-status');
    
    if (editorInstance) {
        const content = editorInstance.getContent();
        const textLength = editorInstance.contentElement.text().length;
        
        statusDiv.html(`
            <div class="text-success mb-2">
                <i class="bi bi-check-circle me-1"></i><strong>Éditeur actif</strong>
            </div>
            <small class="text-muted d-block">Caractères: ${textLength}</small>
            <small class="text-muted d-block">Médias: ${editorConfig.enableMedia ? 'Oui' : 'Non'}</small>
            <small class="text-muted d-block">Auto-save: ${editorConfig.enableAutoSave ? 'Oui' : 'Non'}</small>
        `);
    } else {
        statusDiv.html('<div class="text-muted">Éditeur non initialisé</div>');
    }
}

function showNotification(message, type = 'info') {
    const bgClass = type === 'success' ? 'bg-success' : 
                   type === 'warning' ? 'bg-warning' : 
                   type === 'error' ? 'bg-danger' : 'bg-info';
    
    const toast = $(`
        <div class="toast align-items-center text-white ${bgClass} border-0 position-fixed" 
             style="top: 20px; right: 20px; z-index: 9999;" role="alert">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `);
    
    $('body').append(toast);
    
    if (typeof window.bootstrap !== 'undefined' && window.bootstrap.Toast) {
        new window.bootstrap.Toast(toast[0]).show();
    } else {
        toast.show();
        setTimeout(() => toast.fadeOut(() => toast.remove()), 3000);
    }
}
</script>
{% endblock %}
